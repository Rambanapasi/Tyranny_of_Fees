summarise(Annual.ret = first(com.ret)/last(com.ret)-1)
horizon <- function (inception){
investment_start == lubridate::ymd(inception)
year_end == lubridate::ymd(date)
time_difference <- difftime(year_end , investment_start, units = "years")
time_difference
}
ann.ret %>%
horizon(2000101)
horizon(inception = "20000101")
horizon <- function (inception){
library(lubridate)
investment_start == lubridate::ymd(inception)
year_end == lubridate::ymd(date)
time_difference <- difftime(year_end , investment_start, units = "years")
time_difference
}
horizon(inception = "20000101")
horizon(inception = 20000101)
horizon <- function (date) {
investment_start <- ymd("2020-01-01")  # Replace this with your actual start date
year_end <- ymd(date)
time_difference <- difftime(year_end, investment_start, units = "years")
return(as.numeric(time_difference))
}
horizon(20000101)
horizon <- function (date) {
investment_start <- ymd("2020-01-01")  # Replace this with your actual start date
year_end <- ymd(date)
time_difference <- difftime(year_end, investment_start, units = "weeks")
return(as.numeric(time_difference))
}
horizon(20000101)
horizon <- function (date) {
investment_start <- ymd("2020-01-01")  # Replace this with your actual start date
year_end <- ymd(date)
time_difference <- difftime(investment_start,year_end , units = "weeks")
return(as.numeric(time_difference))
}
horizon(20000101)
horizon <- function (date) {
investment_start <- ymd("2000-01-01")  # Replace this with your actual start date
year_end <- ymd(date)
time_difference <- difftime(year_end, investment_start, units = "years")
return(as.numeric(time_difference))
}
horizon(20220101)
horizon <- function (date) {
investment_start <- ymd("2000-01-01")  # Replace this with your actual start date
year_end <- ymd(date)
time_difference <- difftime(year_end, investment_start, units = "days")
return(as.numeric(time_difference))
}
horizon(20220101)
horizon <- function (date) {
investment_start <- ymd("2000-01-01")  # Replace this with your actual start date
year_end <- ymd(date)
time_difference <- difftime(year_end, investment_start, units = "days")
compounding_period_years <- as.numeric(time_difference, units = "days") / 365
compounding_period_years
}
horizon(20220101)
horizon(20100101)
View(ann.ret)
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y")) %>%
group_by(date, Year) %>%
summarise(Annual.ret = first(com.ret)/last(com.ret)-1)
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y")) %>%
group_by(Year) %>%
summarise(Annual.ret = first(com.ret)/last(com.ret)-1)
ann.ret <- com.rets %>%
mutate(Year = as.Date(format(date, "%Y"), format = "%Y")) %>%
group_by(Year) %>%
summarise(Annual.ret = first(com.ret) / last(com.ret) - 1)
View(ann.ret)
#  add another column for componding period
?as.Date
ann.ret <- com.rets %>%
mutate(Year = as.Date(format(date, "%Y%m%d"), format = "%Y")) %>%
group_by(Year) %>%
summarise(Annual.ret = first(com.ret) / last(com.ret) - 1)
View(ann.ret)
ann.ret <- com.rets %>%
mutate(Year = as.Date(format(date, "%Y"), format = "%Y"),
Year = as.Date(paste0(year(Year), "-12-31")) %>%
group_by(Year) %>%
summarise(Annual.ret = first(com.ret) / last(com.ret) - 1))
ann.ret <- com.rets %>%
mutate(Year = as.Date(format(date, "%Y"), format = "%Y") %>%
( Year = as.Date(paste0(year(Year), "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = first(com.ret) / last(com.ret) - 1))
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y"),
Year = as.Date(paste0(Year, "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = first(com.ret) / last(com.ret) - 1)
View(ann.ret)
ann.ret %>%
mutate(horizon = Year - 2003-12-31)
ann.ret %>%
mutate(horizon = Year - 20031231)
ann.ret %>%
mutate(horizon = as.numeric(difftime(Year, as.Date("2003-12-31"), units = "days")) / 365)
ann.ret %>%
mutate(horizon = as.numeric(difftime(Year, as.Date("2003-12-31"), units = "days")) / 365,
horizon = round(horizon))
ann.ret <- ann.ret %>%
mutate(horizon = as.numeric(difftime(Year, as.Date("2003-12-31"), units = "days")) / 365,
horizon = round(horizon))
View(ann.ret)
ann.ret <- ann.ret %>%
mutate(horizon = as.numeric(difftime(Year, as.Date("2002-12-31"), units = "days")) / 365,
horizon = round(horizon))
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y"),
Year = as.Date(paste0(Year, "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = first(com.ret) / last(com.ret)^/12 - 1)
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y"),
Year = as.Date(paste0(Year, "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = first(com.ret) / last(com.ret)^12 - 1)
View(ann.ret)
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y"),
Year = as.Date(paste0(Year, "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = prod(1 + com.ret)^(12/n()) - 1)
View(ann.ret)
com.rets <- data %>%
arrange(date) %>%
mutate(Year = format(date,"%Y")) %>%
mutate (ret = TRI / lag (TRI) - 1) %>%
filter(date>first(date)) %>%
mutate(com.ret = cumprod(1+ret) ) %>%
group_by(Year) %>%
filter(date == last(date)) %>%
ungroup()
View(com.rets)
View(com.rets)
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y"),
Year = as.Date(paste0(Year, "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = com.ret^(1/12) - 1)
View(ann.ret)
ann.ret <- ann.ret %>%
mutate(horizon = as.numeric(difftime(Year, as.Date("2002-12-31"), units = "days")) / 365,
horizon = round(horizon))
View(ann.ret)
ann.ret %>%
mutate(final_portfolio_with_fees <- 1000 * (1 + Annual.ret - 0.001) ^ horizon)
ann.ret %>%
mutate(final_portfolio_with_fees <- 1000 * (1 + Annual.ret - 0.00) ^ horizon)
fmxdat::make_project("Tyranny_of_Fees/")
fmxdat::make_project(Mac = T)
fee_impact <- function(investment , fee , annual.return , horizon){
final_portfolio_with_fees <- 1000 * (1 + Annual.ret - 0.00) ^ horizon
final_portfolio_with_fees
}
fee_impact <- function(investment , fee , annual.return , horizon){
final_portfolio_with_fees <- investment * (1 + annual.return - fee) ^ horizon
final_portfolio_with_fees
}
ann.ret %>%
fee_impact(1000, 30, ann.ret$Annual.ret, ann.ret$horizon )
fee_impact <- function(investment, fee, annual.return, horizon) {
fee <- fee / 10000  # Convert basis points (bp) to decimal form
final_portfolio_with_fees <- investment * (1 + annual.return - fee) ^ horizon
final_portfolio_with_fees
}
fee_impact(1000, 30, ann.ret$Annual.ret, ann.ret$horizon )
fee_impact(1000, 0, ann.ret$Annual.ret, ann.ret$horizon )
fee_impact(1000, 100, ann.ret$Annual.ret, ann.ret$horizon )
ann.ret %>% mutate(fee_impact(1000, 100, ann.ret$Annual.ret, ann.ret$horizon ))
ann.ret %>% mutate(bp_1 <- fee_impact(1000, 100, ann.ret$Annual.ret, ann.ret$horizon ))
ann.ret %>% mutate(bp_1 = fee_impact(1000, 100, ann.ret$Annual.ret, ann.ret$horizon ))
fee.difference <- function(df, bp){
new.df <-  df %>%
mutate(bp_1 = fee_impact(1000, 100, ann.ret$Annual.ret, ann.ret$horizon))
new.df
}
fee.difference(ann.ret, 10)
fee.difference <- function(df, bp){
new.df <-  df %>%
mutate(bp_1 = fee_impact(1000, bp, ann.ret$Annual.ret, ann.ret$horizon))
new.df
}
fee.difference(ann.ret, 10)
fee.difference(ann.ret, 50)
fee.difference(ann.ret, 300)
fee.difference(ann.ret, 0)
fee_impact(investment = 1000, fee = 30 , annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
no_fee <- fee_impact(investment = 1000, fee = 0 , annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_10 <- fee_impact(investment = 1000, fee = 10 , annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_25 <- fee_impact(investment = 1000, fee = 25 , annual.return = ann.ret$Annual.ret,
horizon= ann.ret$horizon)
fee_50 <- fee_impact(investment = 1000, fee = 50 , annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_100 <- fee_impact(investment = 1000, fee = 100 , annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_250  <- fee_impact(investment = 1000, fee = 250 , annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_300 <- fee_impact(investment = 1000, fee = 300 , annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
tyranny <- data.frame(no_fee, fee_10, fee_25,fee_50, fee_100, fee_250, fee_300)
View(tyranny)
ann.ret$Year <- tyranny$Date
tyranny
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y"),
Year = as.Date(paste0(Year, "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = com.ret^(1/12) - 1)
#  add another column for componding period
ann.ret <- ann.ret %>%
mutate(horizon = as.numeric(difftime(Year, as.Date("2002-12-31"), units = "days")) / 365,
horizon = round(horizon))
tyranny$Date <- ann.ret$Year
tyranny
tyranny <- data.frame(no_fee, fee_10, fee_25,fee_50, fee_100, fee_250, fee_300)
tyranny$Date <- ann.ret$Year
View(ann.ret)
View(tyranny)
tyranny %>%
gather(Fee, Investment Value, -Date)
tyranny %>%
gather(Fee, Investment, -Date)
tidy.tyranny <- tyranny %>%
gather(Fee, Investment, -Date)
tidy.tyranny <- tyranny %>%
gather(Fee, Investment, -Date)
tidy.tyranny$Date <- as.Date(tidy.tyranny$Date)
# Calculate the final values based on "Date" and "Investment" columns
final_values <- tidy.tyranny %>%
group_by(Fee) %>%
arrange(Date) %>%
slice(n()) %>%
ungroup()
# PLot
ggplot(final_values, aes(x = Date, y = Investment, color = Fee)) +
geom_line() +
labs(title = "Final Values at the End of Each Series",
x = "Date",
y = "Final Value",
color = "Fee") +
theme_minimal()
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee)) +
geom_line() +
labs(title = "Final Values at the End of Each Series",
x = "Date",
y = "Final Value",
color = "Fee") +
theme_minimal()
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee)) +
geom_smooth() +
labs(title = "",
x = "Date",
y = "Investment Value",
color = "Fee") +
theme_minimal()
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee)) +
geom_point() +
labs(title = "",
x = "Date",
y = "Investment Value",
color = "Fee") +
theme_minimal()
#  calculate annualized returns
com.rets <- data %>%
arrange(date) %>%
mutate(Year = format(date, "%Y")) %>%
mutate(ret = TRI / lag(TRI) - 1) %>%
filter(date > first(date)) %>%
mutate(com.ret = cumprod(1 + ret)) %>%
group_by(Year) %>%
filter(date == last(date)) %>%
ungroup()
#  now to get annualized returns
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y"),
Year = as.Date(paste0(Year, "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = com.ret^(1/12) - 1)
#  add another column for compounding period
ann.ret <- ann.ret %>%
mutate(horizon = as.numeric(difftime(Year, as.Date("2002-12-31"), units = "days")) / 365,
horizon = round(horizon))
# include fees
fee_impact <- function(investment, fee, annual.return, horizon) {
fee <- fee / 10000  # Convert basis points (bp) to decimal form
final_portfolio_with_fees <- investment * (1 + annual.return - fee) ^ horizon
final_portfolio_with_fees
}
fee.difference <- function(df, bp){
new.df <- df %>%
mutate(bp_1 = fee_impact(1000, bp, ann.ret$Annual.ret, ann.ret$horizon))
new.df
}
# put all of them into a single dataframe
no_fee <- fee_impact(investment = 1000, fee = 0, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_10 <- fee_impact(investment = 1000, fee = 10, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_25 <- fee_impact(investment = 1000, fee = 25, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_50 <- fee_impact(investment = 1000, fee = 50, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_100 <- fee_impact(investment = 1000, fee = 100, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_250 <- fee_impact(investment = 1000, fee = 250, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_200 <- fee_impact(investment = 1000, fee = 200, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
tyranny <- data.frame(
No_Fee = no_fee,
Fee_10 = fee_10,
Fee_25 = fee_25,
Fee_50 = fee_50,
Fee_100 = fee_100,
Fee_250 = fee_250,
Fee_200 = fee_200
)
tyranny$Date <- ann.ret$Year
# Make the data tidy
tidy.tyranny <- tyranny %>%
gather(Fee, Investment, -Date)
tidy.tyranny$Date <- as.Date(tidy.tyranny$Date)
# Plot the line graph
library(ggplot2)
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point() +
geom_line() +
labs(title = "Investment Value Over Time with Different Fees",
x = "Date",
y = "Investment Value",
color = "Fee") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
theme_minimal()
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 3) +          # Increase point size for better visibility
geom_line(size = 1) +           # Adjust line size for better aesthetics
labs(title = "Investment Value Over Time with Different Fees",
x = "Date",
y = "Investment Value",
color = "Fee") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
scale_color_brewer(palette = "Set1") +    # Use a custom color palette (requires 'RColorBrewer' package)
theme_minimal() +
theme(
legend.position = "bottom",        # Move the legend to the bottom of the plot
axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis text vertically
)
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 3) +          # Increase point size for better visibility
geom_line(size = 1) +           # Adjust line size for better aesthetics
labs(title = "Tyranny of Fees",
x = "Date",
y = "Investment Value",
color = "Fee",
source = "Bloomberg") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
scale_color_brewer(palette = "Set1") +    # Use a custom color palette (requires 'RColorBrewer' package)
theme_minimal() +
theme(
legend.position = "bottom",        # Move the legend to the bottom of the plot
axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis text vertically
)
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 3) +          # Increase point size for better visibility
geom_line(size = 1) +           # Adjust line size for better aesthetics
labs(title = "Tyranny of Fees",
x = "Date",
y = "Investment Value",
color = "Fee",
caption = "Bloomberg") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
scale_color_brewer(palette = "Set1") +    # Use a custom color palette (requires 'RColorBrewer' package)
theme_minimal() +
theme(
legend.position = "bottom",        # Move the legend to the bottom of the plot
axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis text vertically
)
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 3) +          # Increase point size for better visibility
geom_line(size = 0.5) +           # Adjust line size for better aesthetics
labs(title = "Tyranny of Fees",
x = "Date",
y = "Investment Value",
color = "Fee",
caption = "Bloomberg") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
scale_color_brewer(palette = "Set1") +    # Use a custom color palette (requires 'RColorBrewer' package)
theme_minimal() +
theme(
legend.position = "bottom",        # Move the legend to the bottom of the plot
axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis text vertically
)
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 1.5) +          # Increase point size for better visibility
geom_line(size = 0.5) +           # Adjust line size for better aesthetics
labs(title = "Tyranny of Fees",
x = "Date",
y = "Investment Value",
color = "Fee",
caption = "Bloomberg") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
scale_color_brewer(palette = "Set1") +    # Use a custom color palette (requires 'RColorBrewer' package)
theme_minimal() +
theme(
legend.position = "bottom",        # Move the legend to the bottom of the plot
axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis text vertically
)
#  calculate annualized returns
com.rets <- data %>%
arrange(date) %>%
mutate(Year = format(date, "%Y")) %>%
mutate(ret = TRI / lag(TRI) - 1) %>%
filter(date > first(date)) %>%
mutate(com.ret = cumprod(1 + ret)) %>%
group_by(Year) %>%
filter(date == last(date)) %>%
ungroup()
#  now to get annualized returns
ann.ret <- com.rets %>%
mutate(Year = format(date, "%Y"),
Year = as.Date(paste0(Year, "-12-31"))) %>%
group_by(Year) %>%
summarise(Annual.ret = com.ret^(1/12) - 1)
#  add another column for compounding period
ann.ret <- ann.ret %>%
mutate(horizon = as.numeric(difftime(Year, as.Date("2002-12-31"), units = "days")) / 365,
horizon = round(horizon))
# include fees
fee_impact <- function(investment, fee, annual.return, horizon) {
fee <- fee / 10000  # Convert basis points (bp) to decimal form
final_portfolio_with_fees <- investment * (1 + annual.return - fee) ^ horizon
final_portfolio_with_fees
}
fee.difference <- function(df, bp){
new.df <- df %>%
mutate(bp_1 = fee_impact(1000, bp, ann.ret$Annual.ret, ann.ret$horizon))
new.df
}
# put all of them into a single dataframe
no_fee <- fee_impact(investment = 1000, fee = 0, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_10 <- fee_impact(investment = 1000, fee = 10, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_25 <- fee_impact(investment = 1000, fee = 25, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_50 <- fee_impact(investment = 1000, fee = 50, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_100 <- fee_impact(investment = 1000, fee = 100, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_250 <- fee_impact(investment = 1000, fee = 250, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
fee_200 <- fee_impact(investment = 1000, fee = 200, annual.return = ann.ret$Annual.ret, horizon = ann.ret$horizon)
tyranny <- data.frame(
No_Fee = no_fee,
Bp_10 = fee_10,
Bp_25 = fee_25,
Bp_50 = fee_50,
Bp_100 = fee_100,
Bp_250 = fee_250,
Bp_200 = fee_200
)
tyranny$Date <- ann.ret$Year
# Make the data tidy
tidy.tyranny <- tyranny %>%
gather(Fee, Investment, -Date)
tidy.tyranny$Date <- as.Date(tidy.tyranny$Date)
# Plot the line graph
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 1.5) +          # Increase point size for better visibility
geom_line(size = 0.5) +           # Adjust line size for better aesthetics
labs(title = "Tyranny of Fees",
x = "Date",
y = "Investment Value",
color = "Fee",
caption = "Bloomberg") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
scale_color_brewer(palette = "Set1") +    # Use a custom color palette (requires 'RColorBrewer' package)
theme_minimal() +
theme(
legend.position = "bottom",        # Move the legend to the bottom of the plot
axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis text vertically
)
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 1.5) +          # Increase point size for better visibility
geom_line(size = 0.5) +           # Adjust line size for better aesthetics
labs(title = "Tyranny of Fees"
subtitle = "R1000 Invested in the JSE Top 40 at different fee structures",
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 1.5) +          # Increase point size for better visibility
geom_line(size = 0.5) +           # Adjust line size for better aesthetics
labs(title = "Tyranny of Fees",
subtitle = "R1000 Invested in the JSE Top 40 at different fee structures",
x = "Date",
y = "Investment Value",
color = "Fee",
caption = "Bloomberg") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
scale_color_brewer(palette = "Set1") +    # Use a custom color palette (requires 'RColorBrewer' package)
theme_minimal() +
theme(
legend.position = "bottom",        # Move the legend to the bottom of the plot
axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis text vertically
)
ggplot(tidy.tyranny, aes(x = Date, y = Investment, color = Fee, group = Fee)) +
geom_point(size = 1.5) +          # Increase point size for better visibility
geom_line(size = 0.5) +           # Adjust line size for better aesthetics
labs(title = "Tyranny of Fees",
subtitle = "R1000 Invested in the JSE Top 40",
x = "Date",
y = "Investment Value",
color = "Fee",
caption = "Bloomberg") +
scale_x_date(date_labels = "%Y", date_breaks = "1 year") +  # Format the date axis
scale_color_brewer(palette = "Set1") +    # Use a custom color palette (requires 'RColorBrewer' package)
theme_minimal() +
theme(
legend.position = "bottom",        # Move the legend to the bottom of the plot
axis.text.x = element_text(angle = 90, hjust = 1)  # Rotate x-axis text vertically
)
